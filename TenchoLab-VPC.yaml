---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  EnvironmentName:
    Type: String
    Default: "TenchoLab"
  VpcCidr:
    Type: String
    Default: "10.102.0.0/16"
  PublicSubnetFixCidrA:
    Type: String
    Default: "10.102.1.0/25"
  PublicSubnetDHCPCidrA:
    Type: String
    Default: "10.102.1.128/25"
  PublicSubnetFixCidrC:
    Type: String
    Default: "10.102.3.0/25"
  PublicSubnetDHCPCidrC:
    Type: String
    Default: "10.102.3.128/25"
  PublicSubnetFixCidrD:
    Type: String
    Default: "10.102.4.0/25"
  PublicSubnetDHCPCidrD:
    Type: String
    Default: "10.102.4.128/25"
  ProtectedSubnetFixCidrA:
    Type: String
    Default: "10.102.11.0/25"
  ProtectedSubnetDHCPCidrA:
    Type: String
    Default: "10.102.11.128/25"
  ProtectedSubnetFixCidrC:
    Type: String
    Default: "10.102.13.0/25"
  ProtectedSubnetDHCPCidrC:
    Type: String
    Default: "10.102.13.128/25"
  ProtectedSubnetFixCidrD:
    Type: String
    Default: "10.102.14.0/25"
  ProtectedSubnetDHCPCidrD:
    Type: String
    Default: "10.102.14.128/25"
  PrivateSubnetFixCidrA:
    Type: String
    Default: "10.102.21.0/25"
  PrivateSubnetDHCPCidrA:
    Type: String
    Default: "10.102.21.128/25"
  PrivateSubnetFixCidrC:
    Type: String
    Default: "10.102.23.0/25"
  PrivateSubnetDHCPCidrC:
    Type: String
    Default: "10.102.23.128/25"
  PrivateSubnetFixCidrD:
    Type: String
    Default: "10.102.24.0/25"
  PrivateSubnetDHCPCidrD:
    Type: String
    Default: "10.102.24.128/25"
Resources:
  # VPC
  TenchoLabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${AWS::Region}
  # InternetGateway
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${AWS::Region}
  InternetGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TenchoLabVPC
      InternetGatewayId: !Ref InternetGW
  
  # Public Subnet
  PublicSubnetFixA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetFixCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Fix-A
  PublicSubnetDHCPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetDHCPCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-DHCP-A
  PublicSubnetFixC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetFixCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Fix-C
  PublicSubnetDHCPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetDHCPCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-DHCP-C
  PublicSubnetFixD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetFixCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Fix-D
  PublicSubnetDHCPD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetDHCPCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-DHCP-D
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TenchoLabVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGW
  PublicSubnetFixARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetFixA
  PublicSubnetDHCPARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetDHCPA
  PublicSubnetFixCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetFixC
  PublicSubnetDHCPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetDHCPC
  PublicSubnetFixDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetFixD
  PublicSubnetDHCPDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetDHCPD

  # Protected Subnet
  ProtectedSubnetFixA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetFixCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-Fix-A
  ProtectedSubnetDHCPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetDHCPCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-DHCP-A
  ProtectedSubnetFixC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetFixCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-Fix-C
  ProtectedSubnetDHCPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetDHCPCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-DHCP-C
  ProtectedSubnetFixD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetFixCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-Fix-D
  ProtectedSubnetDHCPD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetDHCPCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-DHCP-D
  ProtectedPrefixList:
    Type: AWS::EC2::PrefixList
    Properties:
      PrefixListName: !Sub ${EnvironmentName}-ProtectedSubnet
      AddressFamily: IPv4
      MaxEntries: 10
      Entries:
        - Cidr: !Ref ProtectedSubnetFixCidrA
          Description: !Sub ${EnvironmentName}-Protected-Fix-A
        - Cidr: !Ref ProtectedSubnetDHCPCidrA
          Description: !Sub ${EnvironmentName}-Protected-DHCP-A
        - Cidr: !Ref ProtectedSubnetFixCidrC
          Description: !Sub ${EnvironmentName}-Protected-Fix-C
        - Cidr: !Ref ProtectedSubnetDHCPCidrC
          Description: !Sub ${EnvironmentName}-Protected-DHCP-C
        - Cidr: !Ref ProtectedSubnetFixCidrD
          Description: !Sub ${EnvironmentName}-Protected-Fix-D
        - Cidr: !Ref ProtectedSubnetDHCPCidrD
          Description: !Sub ${EnvironmentName}-Protected-DHCP-D
  ProtectedRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TenchoLabVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected
  ProtectedDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      InstanceId: !Ref NatInstance
  ProtectedSubnetFixARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetFixA
  ProtectedSubnetDHCPARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetDHCPA
  ProtectedSubnetFixCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetFixC
  ProtectedSubnetDHCPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetDHCPC
  ProtectedSubnetFixDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetFixD
  ProtectedSubnetDHCPDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetDHCPD

  # Private Subnet
  PrivateSubnetFixA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetFixCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Fix-A
  PrivateSubnetDHCPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDHCPCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-DHCP-A
  PrivateSubnetFixC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetFixCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Fix-C
  PrivateSubnetDHCPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDHCPCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-DHCP-C
  PrivateSubnetFixD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetFixCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Fix-D
  PrivateSubnetDHCPD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDHCPCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-DHCP-D
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TenchoLabVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private
  PrivateSubnetFixARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetFixA
  PrivateSubnetDHCPARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDHCPA
  PrivateSubnetFixCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetFixC
  PrivateSubnetDHCPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDHCPC
  PrivateSubnetFixDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetFixD
  PrivateSubnetDHCPDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDHCPD

  #Nat Instance
  NatInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TenchoLabVPC
      GroupName: SG-NAT
      GroupDescription: SG-NAT
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !Ref ProtectedPrefixList
          Description: From Protected
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourcePrefixListId: !Ref ProtectedPrefixList
          Description: From Protected
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: To Any
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: To Any
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: To Any
  NatInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      IamInstanceProfile: !ImportValue IAM-Ec2ProfiletNatInstance
      ImageId: ami-08a8688fb7eacb171
      InstanceType: t3.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: True
          GroupSet:
            - !Ref NatInstanceSG
          SubnetId: !Ref PublicSubnetFixA
          PrivateIpAddress: 10.102.1.4
      Tags:
        - Key: Name
          Value: NATInstance
      UserData: 
        Fn::Base64: |
          #!/bin/sh
          # Get Token for IMDSv2
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          # Get InstanceID
          INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)
          # Get Region
          AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e 's/.$//')
          # Stop Source / destination check
          aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID --source-dest-check "{\"Value\": false}" --region ${AWS_REGION}
          # Use only IMDSv2
          aws ec2 modify-instance-metadata-options --instance-id $INSTANCE_ID --http-tokens required --http-endpoint enabled --region ${AWS_REGION}
          # Set up NAT Instance
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          sudo yum install -y iptables-services
          sudo service iptables save

Outputs:
  VPCId:
    Value: !Ref TenchoLabVPC
    Export:
      Name: VPC-Id
  PublicSubnetIdFixA:
    Value: !Ref PublicSubnetFixA
    Export:
      Name: VPC-PublicSubnetIdFixA
  PublicSubnetIdDHCPA:
    Value: !Ref PublicSubnetDHCPA
    Export:
      Name: VPC-PublicSubnetIdDHCPA
  PublicSubnetIdFixC:
    Value: !Ref PublicSubnetFixC
    Export:
      Name: VPC-PublicSubnetIdFixC
  PublicSubnetIdDHCPC:
    Value: !Ref PublicSubnetDHCPC
    Export:
      Name: VPC-PublicSubnetIdDHCPC
  PublicSubnetIdFixD:
    Value: !Ref PublicSubnetFixD
    Export:
      Name: VPC-PublicSubnetIdFixD
  PublicSubnetIdDHCPD:
    Value: !Ref PublicSubnetDHCPD
    Export:
      Name: VPC-PublicSubnetIdDHCPD
  PrivateSubnetIdFixA:
    Value: !Ref PrivateSubnetFixA
    Export:
      Name: VPC-PrivateSubnetIdFixA
  PrivateSubnetIdDHCPA:
    Value: !Ref PrivateSubnetDHCPA
    Export:
      Name: VPC-PrivateSubnetIdDHCPA
  PrivateSubnetIdFixC:
    Value: !Ref PrivateSubnetFixC
    Export:
      Name: VPC-PrivateSubnetIdFixC
  PrivateSubnetIdDHCPC:
    Value: !Ref PrivateSubnetDHCPC
    Export:
      Name: VPC-PrivateSubnetIdDHCPC
  PrivateSubnetIdFixD:
    Value: !Ref PrivateSubnetFixD
    Export:
      Name: VPC-PrivateSubnetIdFixD
  PrivateSubnetIdDHCPD:
    Value: !Ref PrivateSubnetDHCPD
    Export:
      Name: VPC-PrivateSubnetIdDHCPD
