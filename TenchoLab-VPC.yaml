---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  EnvironmentName:
    Type: String
    Default: "TenchoLab"
  VpcCidr:
    Type: String
    Default: "10.102.0.0/16"
  PublicSubnetFixCidrA:
    Type: String
    Default: "10.102.1.0/25"
  PublicSubnetDHCPCidrA:
    Type: String
    Default: "10.102.1.128/25"
  PublicSubnetFixCidrC:
    Type: String
    Default: "10.102.3.0/25"
  PublicSubnetDHCPCidrC:
    Type: String
    Default: "10.102.3.128/25"
  PublicSubnetFixCidrD:
    Type: String
    Default: "10.102.4.0/25"
  PublicSubnetDHCPCidrD:
    Type: String
    Default: "10.102.4.128/25"
  ProtectedSubnetFixCidrA:
    Type: String
    Default: "10.102.11.0/25"
  ProtectedSubnetDHCPCidrA:
    Type: String
    Default: "10.102.11.128/25"
  ProtectedSubnetFixCidrC:
    Type: String
    Default: "10.102.13.0/25"
  ProtectedSubnetDHCPCidrC:
    Type: String
    Default: "10.102.13.128/25"
  ProtectedSubnetFixCidrD:
    Type: String
    Default: "10.102.14.0/25"
  ProtectedSubnetDHCPCidrD:
    Type: String
    Default: "10.102.14.128/25"
  PrivateSubnetFixCidrA:
    Type: String
    Default: "10.102.21.0/25"
  PrivateSubnetDHCPCidrA:
    Type: String
    Default: "10.102.21.128/25"
  PrivateSubnetFixCidrC:
    Type: String
    Default: "10.102.23.0/25"
  PrivateSubnetDHCPCidrC:
    Type: String
    Default: "10.102.23.128/25"
  PrivateSubnetFixCidrD:
    Type: String
    Default: "10.102.24.0/25"
  PrivateSubnetDHCPCidrD:
    Type: String
    Default: "10.102.24.128/25"
  PeerVPCIdUsWest2:
    Type: String
  PeerVPCCidrUsWest2:
    Type: String
Resources:
  # VPC
  TenchoLabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${AWS::Region}
  TenchoLabVPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref TenchoLabVPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: s3
      MaxAggregationInterval: 60
      LogDestination: !ImportValue Security-S3Arn
  # VPC Peering for us-west-2
  VPCPeerUsWest2:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerRegion: us-west-2
      PeerVpcId: !Ref PeerVPCIdUsWest2
      VpcId: !Ref TenchoLabVPC
  # InternetGateway
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${AWS::Region}
  InternetGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TenchoLabVPC
      InternetGatewayId: !Ref InternetGW
  # Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref TenchoLabVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref ProtectedRouteTable
        - !Ref PrivateRouteTable
  
  # Public Subnet
  PublicSubnetFixA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetFixCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Fix-A
  PublicSubnetDHCPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetDHCPCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-DHCP-A
  PublicSubnetFixC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetFixCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Fix-C
  PublicSubnetDHCPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetDHCPCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-DHCP-C
  PublicSubnetFixD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetFixCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Fix-D
  PublicSubnetDHCPD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetDHCPCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-DHCP-D
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TenchoLabVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGW
  PublicVPNRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 172.24.0.0/24
      InstanceId: !Ref VPNInstance
  PublicUsWest2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref PeerVPCCidrUsWest2
      VpcPeeringConnectionId: !Ref VPCPeerUsWest2
  PublicSubnetFixARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetFixA
  PublicSubnetDHCPARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetDHCPA
  PublicSubnetFixCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetFixC
  PublicSubnetDHCPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetDHCPC
  PublicSubnetFixDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetFixD
  PublicSubnetDHCPDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetDHCPD

  # Protected Subnet
  ProtectedSubnetFixA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetFixCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-Fix-A
  ProtectedSubnetDHCPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetDHCPCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-DHCP-A
  ProtectedSubnetFixC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetFixCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-Fix-C
  ProtectedSubnetDHCPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetDHCPCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-DHCP-C
  ProtectedSubnetFixD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetFixCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-Fix-D
  ProtectedSubnetDHCPD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref ProtectedSubnetDHCPCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected-DHCP-D
  ProtectedPrefixList:
    Type: AWS::EC2::PrefixList
    Properties:
      PrefixListName: !Sub ${EnvironmentName}-ProtectedSubnet
      AddressFamily: IPv4
      MaxEntries: 10
      Entries:
        - Cidr: !Ref ProtectedSubnetFixCidrA
          Description: !Sub ${EnvironmentName}-Protected-Fix-A
        - Cidr: !Ref ProtectedSubnetDHCPCidrA
          Description: !Sub ${EnvironmentName}-Protected-DHCP-A
        - Cidr: !Ref ProtectedSubnetFixCidrC
          Description: !Sub ${EnvironmentName}-Protected-Fix-C
        - Cidr: !Ref ProtectedSubnetDHCPCidrC
          Description: !Sub ${EnvironmentName}-Protected-DHCP-C
        - Cidr: !Ref ProtectedSubnetFixCidrD
          Description: !Sub ${EnvironmentName}-Protected-Fix-D
        - Cidr: !Ref ProtectedSubnetDHCPCidrD
          Description: !Sub ${EnvironmentName}-Protected-DHCP-D
  ProtectedRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TenchoLabVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Protected
  ProtectedDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      InstanceId: !Ref BastionInstance
  ProtectedVPNRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      DestinationCidrBlock: 172.24.0.0/24
      InstanceId: !Ref VPNInstance
  ProtectedUsWest2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      DestinationCidrBlock: !Ref PeerVPCCidrUsWest2
      VpcPeeringConnectionId: !Ref VPCPeerUsWest2
  ProtectedSubnetFixARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetFixA
  ProtectedSubnetDHCPARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetDHCPA
  ProtectedSubnetFixCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetFixC
  ProtectedSubnetDHCPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetDHCPC
  ProtectedSubnetFixDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetFixD
  ProtectedSubnetDHCPDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      SubnetId: !Ref ProtectedSubnetDHCPD
  ProtectedSubnetDefaultSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TenchoLabVPC
      GroupName: SG-Default-Protected
      GroupDescription: SG-Default-Protected
  ProtectedSubnetDefaultSGIngressZabbix:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ProtectedSubnetDefaultSG
      IpProtocol: tcp
      FromPort: 10050
      ToPort: 10050
      SourceSecurityGroupId: !ImportValue Zabbix-SGECS
      Description: From Zabbix

  # Private Subnet
  PrivateSubnetFixA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetFixCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Fix-A
  PrivateSubnetDHCPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDHCPCidrA
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-DHCP-A
  PrivateSubnetFixC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetFixCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Fix-C
  PrivateSubnetDHCPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDHCPCidrC
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-DHCP-C
  PrivateSubnetFixD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetFixCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Fix-D
  PrivateSubnetDHCPD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TenchoLabVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDHCPCidrD
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-DHCP-D
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TenchoLabVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private
  PrivateVPNRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 172.24.0.0/24
      InstanceId: !Ref VPNInstance
  PrivateUsWest2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Ref PeerVPCCidrUsWest2
      VpcPeeringConnectionId: !Ref VPCPeerUsWest2
  PrivateSubnetFixARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetFixA
  PrivateSubnetDHCPARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDHCPA
  PrivateSubnetFixCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetFixC
  PrivateSubnetDHCPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDHCPC
  PrivateSubnetFixDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetFixD
  PrivateSubnetDHCPDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDHCPD
  PrivateSubnetDefaultSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TenchoLabVPC
      GroupName: SG-Default-Private
      GroupDescription: SG-Default-Private
  PrivateSubnetDefaultSGIngressZabbix:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivateSubnetDefaultSG
      IpProtocol: tcp
      FromPort: 10050
      ToPort: 10050
      SourceSecurityGroupId: !ImportValue Zabbix-SGECS
      Description: From Zabbix

  #Bastion Instance
  BastionInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TenchoLabVPC
      GroupName: SG-Bastion
      GroupDescription: SG-Bastion
      SecurityGroupIngress:
        - IpProtocol: -1
          SourcePrefixListId: !Ref ProtectedPrefixList
          Description: From Protected (Any)
        - IpProtocol: tcp
          FromPort: 8388
          ToPort: 8388
          CidrIp: 0.0.0.0/0
          Description: From Any (ShadowSocks)
        - IpProtocol: udp
          FromPort: 8388
          ToPort: 8388
          CidrIp: 0.0.0.0/0
          Description: From Any (ShadowSocks)
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          SourceSecurityGroupId: !ImportValue Zabbix-SGECS
          Description: From Zabbix
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  BastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionInstance
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      IamInstanceProfile: !ImportValue IAM-Ec2ProfiletBastionInstance
      ImageId: ami-061124182d8a9db73 # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type on 2022/03/03
      InstanceType: t4g.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: True
          GroupSet:
            - !Ref BastionInstanceSG
          SubnetId: !Ref PublicSubnetDHCPA
      Tags:
        - Key: Name
          Value: Bastion
        - Key: Patch Group
          Value: Bastion
        - Key: Patch Target System
          Value: Bastion
      UserData: 
        Fn::Base64: |
          #!/bin/bash -x
          # Get Token for IMDSv2
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          # Get InstanceID
          INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)
          # Get Region
          AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e 's/.$//')
          # Stop Source / destination check
          aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID --source-dest-check "{\"Value\": false}" --region ${AWS_REGION}
          # Use only IMDSv2
          aws ec2 modify-instance-metadata-options --instance-id $INSTANCE_ID --http-tokens required --http-endpoint enabled --region ${AWS_REGION}
          # Configure Hostname
          sudo hostnamectl set-hostname bastion.aws.tencho-lab.net
          # Set up Bastion (NAT) Instance
          echo net.ipv4.ip_forward=1 | sudo tee /etc/sysctl.d/98-nat-instance.conf
          sudo /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          sudo yum install -y iptables-services
          sudo service iptables save
          sudo systemctl enable iptables
          sudo reboot
  BastionInstanceRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue Route53-AwsTenchoLabNetHostZoneId
      Name: bastion.aws.tencho-lab.net
      Type: A
      TTL: 300
      ResourceRecords:
        - !GetAtt BastionInstance.PublicIp
  BastionInstanceCloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: bastion
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !ImportValue CloudMap-NameSpaceId
  BastionInstanceCloudMapAssociation:
    Type: AWS::ServiceDiscovery::Instance
    Properties:
      InstanceAttributes:
        AWS_INSTANCE_IPV4: !GetAtt BastionInstance.PrivateIp
      InstanceId: !Ref BastionInstance
      ServiceId: !Ref BastionInstanceCloudMapService

  #VPN Instance
  VPNInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TenchoLabVPC
      GroupName: SG-VPN
      GroupDescription: SG-VPN
      SecurityGroupIngress:
        - IpProtocol: -1
          SourcePrefixListId: !Ref ProtectedPrefixList
          Description: From Protected (Any)
        - IpProtocol: udp
          FromPort: 51820
          ToPort: 51820
          CidrIp: 0.0.0.0/0
          Description: From Any (Wireguard)
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          SourceSecurityGroupId: !ImportValue Zabbix-SGECS
          Description: From Zabbix
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  VPNEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref VPNInstance
  VPNInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      IamInstanceProfile: !ImportValue IAM-Ec2ProfiletBastionInstance
      ImageId: ami-08db3786368d759c1 # imagebuilder-miraclelinux8-2022-05-25T09-54-42.087Z
      InstanceType: t3a.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: True
          GroupSet:
            - !Ref VPNInstanceSG
          SubnetId: !Ref PublicSubnetDHCPD
      Tags:
        - Key: Name
          Value: VPN
      UserData: !Base64 |
        #!/bin/bash -x
        # Get Token for IMDSv2
        TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
        # Get InstanceID
        INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)
        # Get Region
        AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e 's/.$//')
        # Use only IMDSv2
        aws ec2 modify-instance-metadata-options --instance-id $INSTANCE_ID --http-tokens required --http-endpoint enabled --region ${AWS_REGION}
        # Configure Hostname
        sudo hostnamectl set-hostname vpn.aws.tencho-lab.net
        # Set up VPN Instance
        echo net.ipv4.ip_forward=1 | sudo tee /etc/sysctl.d/98-vpn-instance.conf
        sudo reboot
  VPNInstanceRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue Route53-AwsTenchoLabNetHostZoneId
      Name: vpn.aws.tencho-lab.net
      Type: A
      TTL: 300
      ResourceRecords:
        - !GetAtt VPNInstance.PublicIp
  VPNInstanceCloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: vpn
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !ImportValue CloudMap-NameSpaceId
  VPNInstanceCloudMapAssociation:
    Type: AWS::ServiceDiscovery::Instance
    Properties:
      InstanceAttributes:
        AWS_INSTANCE_IPV4: !GetAtt VPNInstance.PrivateIp
      InstanceId: !Ref VPNInstance
      ServiceId: !Ref VPNInstanceCloudMapService

Outputs:
  VPCId:
    Value: !Ref TenchoLabVPC
    Export:
      Name: VPC-Id
  VPCCidr:
    Value: !Ref VpcCidr
    Export:
      Name: VPC-Cidr
  PublicSubnetIdFixA:
    Value: !Ref PublicSubnetFixA
    Export:
      Name: VPC-PublicSubnetIdFixA
  PublicSubnetIdDHCPA:
    Value: !Ref PublicSubnetDHCPA
    Export:
      Name: VPC-PublicSubnetIdDHCPA
  PublicSubnetIdFixC:
    Value: !Ref PublicSubnetFixC
    Export:
      Name: VPC-PublicSubnetIdFixC
  PublicSubnetIdDHCPC:
    Value: !Ref PublicSubnetDHCPC
    Export:
      Name: VPC-PublicSubnetIdDHCPC
  PublicSubnetIdFixD:
    Value: !Ref PublicSubnetFixD
    Export:
      Name: VPC-PublicSubnetIdFixD
  PublicSubnetIdDHCPD:
    Value: !Ref PublicSubnetDHCPD
    Export:
      Name: VPC-PublicSubnetIdDHCPD
  ProtectedSubnetIdFixA:
    Value: !Ref ProtectedSubnetFixA
    Export:
      Name: VPC-ProtectedSubnetIdFixA
  ProtectedSubnetIdDHCPA:
    Value: !Ref ProtectedSubnetDHCPA
    Export:
      Name: VPC-ProtectedSubnetIdDHCPA
  ProtectedSubnetIdFixC:
    Value: !Ref ProtectedSubnetFixC
    Export:
      Name: VPC-ProtectedSubnetIdFixC
  ProtectedSubnetIdDHCPC:
    Value: !Ref ProtectedSubnetDHCPC
    Export:
      Name: VPC-ProtectedSubnetIdDHCPC
  ProtectedSubnetIdFixD:
    Value: !Ref ProtectedSubnetFixD
    Export:
      Name: VPC-ProtectedSubnetIdFixD
  ProtectedSubnetIdDHCPD:
    Value: !Ref ProtectedSubnetDHCPD
    Export:
      Name: VPC-ProtectedSubnetIdDHCPD
  PrivateSubnetIdFixA:
    Value: !Ref PrivateSubnetFixA
    Export:
      Name: VPC-PrivateSubnetIdFixA
  PrivateSubnetIdDHCPA:
    Value: !Ref PrivateSubnetDHCPA
    Export:
      Name: VPC-PrivateSubnetIdDHCPA
  PrivateSubnetIdFixC:
    Value: !Ref PrivateSubnetFixC
    Export:
      Name: VPC-PrivateSubnetIdFixC
  PrivateSubnetIdDHCPC:
    Value: !Ref PrivateSubnetDHCPC
    Export:
      Name: VPC-PrivateSubnetIdDHCPC
  PrivateSubnetIdFixD:
    Value: !Ref PrivateSubnetFixD
    Export:
      Name: VPC-PrivateSubnetIdFixD
  PrivateSubnetIdDHCPD:
    Value: !Ref PrivateSubnetDHCPD
    Export:
      Name: VPC-PrivateSubnetIdDHCPD
  VPNInstancePrivateIpWithCidr:
    Value: !Sub ${VPNInstance.PrivateIp}/32
    Export:
      Name: VPC-VPNInstancePrivateIpWithCidr
  BastionInstancePrivateIpWithCidr:
    Value: !Sub ${BastionInstance.PrivateIp}/32
    Export:
      Name: VPC-BastionInstancePrivateIpWithCidr